environment:
  matrix:
    - PYTHON: "C:\\Python35-x64"

install:
  # this installs the appropriate Miniconda (Py2/Py3, 32/64 bit),
  # as well as pip, conda-build, and the binstar CLI
  #- powershell .\\continuous-integration\\appveyor\\install.ps1
  #- "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  #- "%PYTHON%\\python.exe -m pip install wheel"
  - "%PYTHON%\\python.exe pip install -U wheel numpy scipy pandas cython"
  
build: false

test_script:
  # Build the compiled extension and run the project tests
  - "%PYTHON%\\python.exe setup.py test"

after_test:
  # If tests are successful, create a whl package for the project.
  - "%PYTHON%\\python.exe setup.py bdist_wheel"
  - ps: "ls dist"

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: dist\*

#test_script:
#  # Build and test the package. This appears(?) to sporadically fail due to a 
#  # bug in conda-build on 32 bit python.
#  # https://github.com/conda/conda-build/issues/152
#  #
#  # Note also that our setup.py script, which is called by conda-build, writes
#  # a __conda_version__.txt file, so the version number on the binary package
#  # is set dynamically. This unfortunately mean that conda build --output
#  # doesn't really work.
#  #
#  - "%CMD_IN_ENV% conda build conda-recipe --quiet"
#  # Move the conda package into the current directory, to register it
#  # as an "artifact" for Appveyor. cmd.exe does't have good globbing, so
#  # we'll use a simple python script.
#  - python continuous-integration\move-conda-package.py conda-recipe
#
#artifacts:
#  # Archive the generated conda package in the ci.appveyor.com build report.
#  - path: '*.tar.bz2'
#
#on_success:
#   #Upload built binaries to binstar.org. The globbing and handling of the
#   #exit-status code is tricky in cmd.exe or powershell, so we're just using
#   #a python script.
#  - python continuous-integration\binstar-push.py
